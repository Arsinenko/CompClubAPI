openapi: 3.0.1
info:
  title: My API
  description: Документация к API проекта CompClub
  version: v1
paths:
  /api/Account/get_accounts:
    get:
      tags:
        - Account
      summary: Получение списка всех аккаунтов (только для администратора или владельца).
      description: "Возвращает список всех зарегистрированных аккаунтов с привязкой к клиенту.\r\nТребуется JWT-токен с ролью \"Admin\" или \"Owner\"."
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Account'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Account'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Account'
  /api/Account/get_info/{id}:
    get:
      tags:
        - Account
      summary: Получение информации об аккаунте по его ID (только для администратора).
      description: Возвращает подробную информацию об аккаунте.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/AccountGetInfoResponseSchema'
            application/json:
              schema:
                $ref: '#/components/schemas/AccountGetInfoResponseSchema'
            text/json:
              schema:
                $ref: '#/components/schemas/AccountGetInfoResponseSchema'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/Account/get_info:
    get:
      tags:
        - Account
      summary: Получение информации о своем аккаунте (для клиента).
      description: Авторизованный клиент может получить свои данные.
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Account'
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
            text/json:
              schema:
                $ref: '#/components/schemas/Account'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/Account/update/{id}:
    put:
      tags:
        - Account
      summary: Обновление информации об аккаунте по ID (только для администратора или владельца).
      description: Можно частично обновить данные (логин, email, пароль).
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAccountByIdModel'
          text/json:
            schema:
              $ref: '#/components/schemas/UpdateAccountByIdModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UpdateAccountByIdModel'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/MessageResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/Account/update:
    put:
      tags:
        - Account
      summary: Обновление своей информации (для клиента).
      description: Клиент может изменить свой логин и пароль.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAccountModel'
          text/json:
            schema:
              $ref: '#/components/schemas/UpdateAccountModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UpdateAccountModel'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/MessageResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/Account/add_balance:
    post:
      tags:
        - Account
      summary: Пополнение баланса текущего аккаунта (только для администратора или владельца).
      description: Добавляет указанную сумму к текущему балансу и сохраняет историю.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddBalanceModel'
          text/json:
            schema:
              $ref: '#/components/schemas/AddBalanceModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/AddBalanceModel'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/MessageResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/Account/add_balance_by_id/{id}:
    post:
      tags:
        - Account
      summary: Пополнение баланса аккаунта по ID (только для администратора или владельца).
      description: Также добавляется запись о доходе для клуба.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: idClub
          in: query
          schema:
            type: integer
            format: int32
        - name: money
          in: query
          schema:
            type: number
            format: double
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/MessageResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/Account/balance_history:
    get:
      tags:
        - Account
      summary: Получение истории баланса для текущего клиента.
      description: Возвращает список всех операций пополнения.
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/BalanceHistoryResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/BalanceHistoryResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/BalanceHistoryResponse'
  /api/Account/change_password:
    post:
      tags:
        - Account
      summary: Смена пароля для авторизованного клиента.
      description: Хэширует новый пароль и сохраняет его.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordModel'
          text/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ChangePasswordModel'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/MessageResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/Account/change_password_by_email/{email}:
    post:
      tags:
        - Account
      summary: Сброс пароля по email.
      description: Генерирует временный пароль и отправляет его на указанный email.
      parameters:
        - name: email
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/MessageResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
  /api/Account/deactivate_account/{id}:
    put:
      tags:
        - Account
      summary: Деактивация аккаунта по ID (только для администратора или владельца).
      description: Делает аккаунт неактивным без удаления.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/MessageResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/Account/authentication:
    post:
      tags:
        - Account
      summary: Аутентификация пользователя и выдача JWT-токена.
      description: Проверяет логин и пароль, возвращает JWT при успешной аутентификации.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthModel'
          text/json:
            schema:
              $ref: '#/components/schemas/AuthModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/AuthModel'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/TokenResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/Booking/create_advanced_booking:
    post:
      tags:
        - Booking
      summary: "Создание предварительного бронирования (одного активного на аккаунт).\r\nДоступно только для клиентов."
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAdvancedBookingModel'
          text/json:
            schema:
              $ref: '#/components/schemas/CreateAdvancedBookingModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreateAdvancedBookingModel'
      responses:
        '200':
          description: OK
  /api/Booking/advanced_booking_cancellation:
    delete:
      tags:
        - Booking
      summary: Отмена предварительного бронирования клиента.
      responses:
        '200':
          description: OK
  /api/Booking/get_bookings:
    get:
      tags:
        - Booking
      summary: "Получение списка всех бронирований.\r\nДоступно для владельцев, администраторов и маркетологов."
      responses:
        '200':
          description: OK
  /api/Booking/get_booking/{id}:
    get:
      tags:
        - Booking
      summary: "Получение информации о конкретном бронировании по ID.\r\nДоступно для владельцев, администраторов и маркетологов."
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
  /api/Booking/get_client_bookings:
    get:
      tags:
        - Booking
      summary: Получение всех бронирований текущего клиента.
      responses:
        '200':
          description: OK
  /api/Booking/delete/{id}:
    delete:
      tags:
        - Booking
      summary: Удаление конкретного бронирования клиента по ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
  /api/Booking/get_info/{id}:
    get:
      tags:
        - Booking
      summary: Получение информации о конкретном бронировании текущего клиента по ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
  /api/Client:
    get:
      tags:
        - Client
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Client'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Client'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Client'
  /api/Client/{id}:
    get:
      tags:
        - Client
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Client'
            application/json:
              schema:
                $ref: '#/components/schemas/Client'
            text/json:
              schema:
                $ref: '#/components/schemas/Client'
  /api/Client/update_client/{id}:
    put:
      tags:
        - Client
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateClientModel'
          text/json:
            schema:
              $ref: '#/components/schemas/UpdateClientModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UpdateClientModel'
      responses:
        '200':
          description: OK
  /api/Client/create_client:
    post:
      tags:
        - Client
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateClient'
          text/json:
            schema:
              $ref: '#/components/schemas/CreateClient'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreateClient'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Client'
            application/json:
              schema:
                $ref: '#/components/schemas/Client'
            text/json:
              schema:
                $ref: '#/components/schemas/Client'
  /api/Club/create_club:
    post:
      tags:
        - Club
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateClubModel'
          text/json:
            schema:
              $ref: '#/components/schemas/CreateClubModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreateClubModel'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Club'
            application/json:
              schema:
                $ref: '#/components/schemas/Club'
            text/json:
              schema:
                $ref: '#/components/schemas/Club'
  /api/Club/get_clubs:
    get:
      tags:
        - Club
      responses:
        '200':
          description: OK
  /api/Club/get_visited_clubs:
    get:
      tags:
        - Club
      responses:
        '200':
          description: OK
  /api/Club/get_club_info/{id}:
    get:
      tags:
        - Club
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Club'
            application/json:
              schema:
                $ref: '#/components/schemas/Club'
            text/json:
              schema:
                $ref: '#/components/schemas/Club'
  /api/Club/delete_club/{id}:
    delete:
      tags:
        - Club
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
  /api/Club/update_club/{id}:
    put:
      tags:
        - Club
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateClubModel'
          text/json:
            schema:
              $ref: '#/components/schemas/UpdateClubModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UpdateClubModel'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Club'
            application/json:
              schema:
                $ref: '#/components/schemas/Club'
            text/json:
              schema:
                $ref: '#/components/schemas/Club'
  /api/Employee/hire_employee:
    post:
      tags:
        - Employee
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HireEmployeeModel'
          text/json:
            schema:
              $ref: '#/components/schemas/HireEmployeeModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/HireEmployeeModel'
      responses:
        '200':
          description: OK
  /api/Employee/get_employees:
    get:
      tags:
        - Employee
      responses:
        '200':
          description: OK
  /api/Employee/get_employees_by_club/{id}:
    get:
      tags:
        - Employee
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
  /api/Employee/fire_employee/{id}:
    post:
      tags:
        - Employee
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
  /api/Employee/update_employee_password:
    put:
      tags:
        - Employee
      requestBody:
        content:
          application/json:
            schema:
              type: string
          text/json:
            schema:
              type: string
          application/*+json:
            schema:
              type: string
      responses:
        '200':
          description: OK
  /api/Employee/update_employee/{id}:
    put:
      tags:
        - Employee
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateEmployeeModel'
          text/json:
            schema:
              $ref: '#/components/schemas/UpdateEmployeeModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UpdateEmployeeModel'
      responses:
        '200':
          description: OK
  /api/Employee/authorization:
    post:
      tags:
        - Employee
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthModel'
          text/json:
            schema:
              $ref: '#/components/schemas/AuthModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/AuthModel'
      responses:
        '200':
          description: OK
  /api/EmployeeRole/create_role:
    post:
      tags:
        - EmployeeRole
      parameters:
        - name: name
          in: query
          schema:
            type: string
      responses:
        '200':
          description: OK
  /api/EmployeeRole/delete_role/{id}:
    delete:
      tags:
        - EmployeeRole
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
  /api/EmployeeRole/update_role/{id}:
    put:
      tags:
        - EmployeeRole
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: name
          in: query
          schema:
            type: string
      responses:
        '200':
          description: OK
  /api/EmployeeRole/get_roles:
    get:
      tags:
        - EmployeeRole
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/GetRolesResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/GetRolesResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/GetRolesResponse'
  /api/Equipment/create_equipment:
    post:
      tags:
        - Equipment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEquipmentModel'
          text/json:
            schema:
              $ref: '#/components/schemas/CreateEquipmentModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreateEquipmentModel'
      responses:
        '200':
          description: OK
  /api/Equipment/info/{id}:
    get:
      tags:
        - Equipment
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
  /api/Equipment/update/{id}:
    put:
      tags:
        - Equipment
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Equipment'
          text/json:
            schema:
              $ref: '#/components/schemas/Equipment'
          application/*+json:
            schema:
              $ref: '#/components/schemas/Equipment'
      responses:
        '200':
          description: OK
  /api/Equipment/delete/{id}:
    delete:
      tags:
        - Equipment
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
  /api/Equipment/EquipmentMaintenances:
    get:
      tags:
        - Equipment
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EquipmentMaintenance'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EquipmentMaintenance'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EquipmentMaintenance'
  /api/Equipment/create_equipment_maintenance:
    post:
      tags:
        - Equipment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EquipmentMaintenance'
          text/json:
            schema:
              $ref: '#/components/schemas/EquipmentMaintenance'
          application/*+json:
            schema:
              $ref: '#/components/schemas/EquipmentMaintenance'
      responses:
        '200':
          description: OK
  /api/Equipment/update_equipment_maintenance/{id}:
    put:
      tags:
        - Equipment
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EquipmentMaintenance'
          text/json:
            schema:
              $ref: '#/components/schemas/EquipmentMaintenance'
          application/*+json:
            schema:
              $ref: '#/components/schemas/EquipmentMaintenance'
      responses:
        '200':
          description: OK
  /api/Feedback/create_feedback:
    post:
      tags:
        - Feedback
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateFeedbackModel'
          text/json:
            schema:
              $ref: '#/components/schemas/CreateFeedbackModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreateFeedbackModel'
      responses:
        '200':
          description: OK
  /api/Feedback/get_feedbacks:
    get:
      tags:
        - Feedback
      responses:
        '200':
          description: OK
  /api/Feedback/get_client_feedbacks:
    get:
      tags:
        - Feedback
      responses:
        '200':
          description: OK
  /api/Feedback/update_feedback/{id}:
    post:
      tags:
        - Feedback
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateFeedbackModel'
          text/json:
            schema:
              $ref: '#/components/schemas/CreateFeedbackModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreateFeedbackModel'
      responses:
        '200':
          description: OK
  /api/Feedback/delete_feedback/{id}:
    delete:
      tags:
        - Feedback
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
  /Pages:
    get:
      tags:
        - Pages
      responses:
        '200':
          description: OK
  /Pages/{page}:
    get:
      tags:
        - Pages
      parameters:
        - name: page
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
  /api/Payments/get_info:
    get:
      tags:
        - Payments
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Payment'
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
            text/json:
              schema:
                $ref: '#/components/schemas/Payment'
  /api/Payments/create:
    post:
      tags:
        - Payments
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePaymentModel'
          text/json:
            schema:
              $ref: '#/components/schemas/CreatePaymentModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreatePaymentModel'
      responses:
        '200':
          description: OK
  /api/Payments/delete:
    delete:
      tags:
        - Payments
      responses:
        '200':
          description: OK
  /api/Session/start:
    post:
      tags:
        - Session
      parameters:
        - name: interval
          in: query
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBookingModel'
          text/json:
            schema:
              $ref: '#/components/schemas/CreateBookingModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreateBookingModel'
      responses:
        '200':
          description: OK
  /api/Session/stop:
    post:
      tags:
        - Session
      parameters:
        - name: timerId
          in: query
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
  /api/Statistic/update_finance_statistic/{id}:
    put:
      tags:
        - Statistic
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: money
          in: query
          schema:
            type: number
            format: double
        - name: revenue
          in: query
          schema:
            type: boolean
      responses:
        '200':
          description: OK
  /api/Statistic/get_club_finance_statistic/{id}:
    get:
      tags:
        - Statistic
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
  /api/Statistic/statistics:
    get:
      tags:
        - Statistic
      responses:
        '200':
          description: OK
  /api/Tariff/get_tariffs:
    get:
      tags:
        - Tariff
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tariff'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tariff'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tariff'
  /api/Tariff/create_tariff:
    post:
      tags:
        - Tariff
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tariff'
          text/json:
            schema:
              $ref: '#/components/schemas/Tariff'
          application/*+json:
            schema:
              $ref: '#/components/schemas/Tariff'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Tariff'
            application/json:
              schema:
                $ref: '#/components/schemas/Tariff'
            text/json:
              schema:
                $ref: '#/components/schemas/Tariff'
  /api/Tariff/update_tariff/{id}:
    post:
      tags:
        - Tariff
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tariff'
          text/json:
            schema:
              $ref: '#/components/schemas/Tariff'
          application/*+json:
            schema:
              $ref: '#/components/schemas/Tariff'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Tariff'
            application/json:
              schema:
                $ref: '#/components/schemas/Tariff'
            text/json:
              schema:
                $ref: '#/components/schemas/Tariff'
  /api/Tariff/delete_tariff/{id}:
    delete:
      tags:
        - Tariff
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Tariff'
            application/json:
              schema:
                $ref: '#/components/schemas/Tariff'
            text/json:
              schema:
                $ref: '#/components/schemas/Tariff'
  /api/WorkingSpace/create_working_space:
    post:
      tags:
        - WorkingSpace
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateWorkingSpace'
          text/json:
            schema:
              $ref: '#/components/schemas/CreateWorkingSpace'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreateWorkingSpace'
      responses:
        '200':
          description: OK
  /api/WorkingSpace/working_spaces:
    get:
      tags:
        - WorkingSpace
      responses:
        '200':
          description: OK
  /api/WorkingSpace/working_spaces_by_club/{idClub}:
    get:
      tags:
        - WorkingSpace
      parameters:
        - name: idClub
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
  /api/WorkingSpace/get_info/{id}:
    get:
      tags:
        - WorkingSpace
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
  /api/WorkingSpace/update/{id}:
    put:
      tags:
        - WorkingSpace
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateWorkingSpace'
          text/json:
            schema:
              $ref: '#/components/schemas/CreateWorkingSpace'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreateWorkingSpace'
      responses:
        '200':
          description: OK
  /api/WorkingSpace/delete/{id}:
    delete:
      tags:
        - WorkingSpace
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
  /api/WorkingSpace/add_equipment:
    post:
      tags:
        - WorkingSpace
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkingSpaceEquipment'
          text/json:
            schema:
              $ref: '#/components/schemas/WorkingSpaceEquipment'
          application/*+json:
            schema:
              $ref: '#/components/schemas/WorkingSpaceEquipment'
      responses:
        '200':
          description: OK
  /api/WorkingSpace/delete_equipment/{id}:
    delete:
      tags:
        - WorkingSpace
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
components:
  schemas:
    Account:
      type: object
      properties:
        id:
          type: integer
          format: int32
        idClient:
          type: integer
          format: int32
        balance:
          type: number
          format: double
          nullable: true
        login:
          type: string
          nullable: true
        lastLogin:
          type: string
          format: date-time
          nullable: true
        passwordChangedAt:
          type: string
          format: date-time
          nullable: true
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        email:
          type: string
          nullable: true
        isAlive:
          type: boolean
          nullable: true
        idClientNavigation:
          $ref: '#/components/schemas/Client'
      additionalProperties: false
    AccountGetInfoResponseSchema:
      type: object
      properties:
        account:
          $ref: '#/components/schemas/Account'
      additionalProperties: false
    AddBalanceModel:
      type: object
      properties:
        money:
          type: number
          format: double
      additionalProperties: false
    AuthModel:
      type: object
      properties:
        login:
          type: string
          nullable: true
        password:
          type: string
          nullable: true
      additionalProperties: false
    BalanceHistory:
      type: object
      properties:
        id:
          type: integer
          format: int32
        action:
          type: string
          nullable: true
        price:
          type: number
          format: double
          nullable: true
        previousBalance:
          type: number
          format: double
          nullable: true
        createdAt:
          type: string
          format: date-time
          nullable: true
        accountId:
          type: integer
          format: int32
      additionalProperties: false
    BalanceHistoryResponse:
      type: object
      properties:
        history:
          type: array
          items:
            $ref: '#/components/schemas/BalanceHistory'
          nullable: true
      additionalProperties: false
    ChangePasswordModel:
      type: object
      properties:
        password:
          type: string
          nullable: true
      additionalProperties: false
    Client:
      type: object
      properties:
        id:
          type: integer
          format: int32
        firstName:
          type: string
          nullable: true
        middleName:
          type: string
          nullable: true
        lastName:
          type: string
          nullable: true
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
      additionalProperties: false
    Club:
      type: object
      properties:
        id:
          type: integer
          format: int32
        address:
          type: string
          nullable: true
        name:
          type: string
          nullable: true
        phone:
          type: string
          nullable: true
        workingHours:
          type: string
          nullable: true
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        isAlive:
          type: boolean
          nullable: true
      additionalProperties: false
    CreateAdvancedBookingModel:
      type: object
      properties:
        idWorkingSpace:
          type: integer
          format: int32
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
      additionalProperties: false
    CreateBookingModel:
      type: object
      properties:
        idWorkingSpace:
          type: integer
          format: int32
        startTime:
          type: string
          format: date-time
      additionalProperties: false
    CreateClient:
      type: object
      properties:
        firstName:
          type: string
          nullable: true
        middleName:
          type: string
          nullable: true
        lastName:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        login:
          type: string
          nullable: true
        password:
          type: string
          nullable: true
      additionalProperties: false
    CreateClubModel:
      type: object
      properties:
        address:
          type: string
          nullable: true
        name:
          type: string
          nullable: true
        phone:
          type: string
          nullable: true
        workingHours:
          type: string
          nullable: true
        finances:
          type: number
          format: double
      additionalProperties: false
    CreateEquipmentModel:
      type: object
      properties:
        type:
          type: string
          nullable: true
        name:
          type: string
          nullable: true
        specification:
          type: string
          nullable: true
        purchasePrice:
          type: number
          format: double
        idClub:
          type: integer
          format: int32
      additionalProperties: false
    CreateFeedbackModel:
      type: object
      properties:
        clubId:
          type: integer
          format: int32
        rating:
          type: integer
          format: int32
        comment:
          type: string
          nullable: true
      additionalProperties: false
    CreatePaymentModel:
      type: object
      properties:
        cardNumber:
          type: string
          nullable: true
        cvv:
          type: string
          nullable: true
        paymentMethodId:
          type: integer
          format: int32
      additionalProperties: false
    CreateWorkingSpace:
      type: object
      properties:
        idClub:
          type: integer
          format: int32
        name:
          type: string
          nullable: true
        status:
          type: string
          nullable: true
        idTariff:
          type: integer
          format: int32
      additionalProperties: false
    Equipment:
      type: object
      properties:
        id:
          type: integer
          format: int32
        type:
          type: string
          nullable: true
        name:
          type: string
          nullable: true
        specification:
          type: string
          nullable: true
        purchaseDate:
          type: string
          format: date
          nullable: true
        purchasePrice:
          type: number
          format: double
          nullable: true
        idClub:
          type: integer
          format: int32
        status:
          type: integer
          format: int32
        quantity:
          type: integer
          format: int32
          nullable: true
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
      additionalProperties: false
    EquipmentMaintenance:
      type: object
      properties:
        id:
          type: integer
          format: int32
        equipmentId:
          type: integer
          format: int32
        maintenanceDate:
          type: string
          format: date-time
          nullable: true
        description:
          type: string
          nullable: true
        cost:
          type: number
          format: double
          nullable: true
        createdAt:
          type: string
          format: date-time
          nullable: true
      additionalProperties: false
    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          nullable: true
      additionalProperties: false
    GetRolesResponse:
      type: object
      properties:
        roles:
          type: array
          items:
            $ref: '#/components/schemas/Role'
          nullable: true
      additionalProperties: false
    HireEmployeeModel:
      type: object
      properties:
        login:
          type: string
          nullable: true
        password:
          type: string
          nullable: true
        passpordData:
          type: string
          nullable: true
        idRole:
          type: integer
          format: int32
        idClub:
          type: integer
          format: int32
        salary:
          type: integer
          format: int32
      additionalProperties: false
    MessageResponse:
      type: object
      properties:
        message:
          type: string
          nullable: true
      additionalProperties: false
    Payment:
      type: object
      properties:
        id:
          type: integer
          format: int32
        encryptedCardNumber:
          type: string
          format: byte
          nullable: true
        encryptedCvv:
          type: string
          format: byte
          nullable: true
        accountId:
          type: integer
          format: int32
        createdAt:
          type: string
          format: date-time
          nullable: true
      additionalProperties: false
    Role:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
          nullable: true
        createdAt:
          type: string
          format: date-time
          nullable: true
      additionalProperties: false
    Tariff:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
          nullable: true
        pricePerMinute:
          type: number
          format: double
      additionalProperties: false
    TokenResponse:
      type: object
      properties:
        token:
          type: string
          nullable: true
      additionalProperties: false
    UpdateAccountByIdModel:
      type: object
      properties:
        login:
          type: string
          nullable: true
        password:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
      additionalProperties: false
    UpdateAccountModel:
      type: object
      properties:
        login:
          type: string
          nullable: true
        password:
          type: string
          nullable: true
      additionalProperties: false
    UpdateClientModel:
      type: object
      properties:
        firstName:
          type: string
          nullable: true
        middleName:
          type: string
          nullable: true
        lastName:
          type: string
          nullable: true
      additionalProperties: false
    UpdateClubModel:
      type: object
      properties:
        address:
          type: string
          nullable: true
        name:
          type: string
          nullable: true
        phone:
          type: string
          nullable: true
        workingHours:
          type: string
          nullable: true
      additionalProperties: false
    UpdateEmployeeModel:
      type: object
      properties:
        login:
          type: string
          nullable: true
        idRole:
          type: integer
          format: int32
        salary:
          type: number
          format: double
        idClub:
          type: integer
          format: int32
      additionalProperties: false
    WorkingSpaceEquipment:
      type: object
      properties:
        id:
          type: integer
          format: int32
        idWorkingSpace:
          type: integer
          format: int32
        idEquipment:
          type: integer
          format: int32
        createdAt:
          type: string
          format: date-time
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
      additionalProperties: false
  securitySchemes:
    Bearer:
      type: apiKey
      description: Введите 'Bearer' [пробел] и ваш токен в поле ниже для доступа к защищенным ресурсам
      name: Authorization
      in: header
security:
  - Bearer: []
